apiVersion: argoproj.io/v1alpha1
kind: Application # リソースの種類を Application として定義 (Argo CD の Application リソース)
metadata:
  name: kube-prometheus-stack # Argo CD Applicationの名前 (任意の名前に変更可能 -  識別しやすい名前を設定)
  namespace: argocd # Argo CDがインストールされているNamespace (通常は argocd -  Application を Argo CD が管理する namespace)
spec: # Application の仕様を定義するセクション
  project: default # Argo CD Project (デフォルトでは default プロジェクト -  Application が属する Argo CD プロジェクト)
  source: # デプロイするリソースのソースを定義するセクション
    repoURL: https://github.com/prometheus-community/helm-charts # Helm ChartリポジトリのURL (kube-prometheus-stack Helm Chart がホストされているリポジトリ)
    path: charts/kube-prometheus-stack # Helm Chartのパス (リポジトリ内の Helm Chart のディレクトリパス)
    targetRevision: main # ブランチ、タグ、またはコミット SHA (ここでは main ブランチの最新バージョンを使用)
  destination: # デプロイ先クラスタと Namespace を定義するセクション
    server: https://kubernetes.default.svc # Kubernetes APIサーバーのアドレス (通常は変更不要 -  Argo CD が動作しているクラスタ内へのデプロイ)
    namespace: monitoring # デプロイ先のNamespace (monitoring Namespace に kube-prometheus-stack をデプロイ -  任意の名前に変更可能)
  syncPolicy: # 同期ポリシーを定義するセクション
    automated: # 自動同期に関する設定
      prune: true # Git リポジトリから削除された Kubernetes リソースを自動的に削除 (不要になったリソースを自動削除)
      selfHeal: true # クラスタの状態が Git リポジトリの状態と異なる場合に自動的に修復 (意図しない変更を自動的に元に戻す)
    syncOptions: # 同期オプション (追加設定)
      - CreateNamespace=true # デプロイ先の Namespace が存在しない場合に自動的に作成 (namespace: monitoring が存在しない場合に自動作成)
      - ServerSideApply=true # Kubernetes の Server-Side Apply 機能を使用 (大規模な設定や競合をより安全に処理)